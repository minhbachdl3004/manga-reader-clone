import type { Metadata } from "next";
import Category from "@/components/common/category";
import { Header } from "@/components/common/heading/Header";
import BreadCrumb from "@/components/common/BreadCrumb";
import Error from "./error";
import { MangaPoster2 } from "@/components/common/MangaPoster";
import Detail from "@/components/common/Detail";
import Tick from "@/components/manga-card/Tick";
import { homepageUrl } from "utils/urlConfig";
import { MangaProps } from "utils/type";
import MangaScreen from "@/components/MangaScreen";


export async function generateMetadata({
  params,
}: {
  params: { name: string };
}): Promise<Metadata> {
  const data = await getMangaByGenre(params.name);

  // if (!data?.mangas) return notFound();

  return {
    title: `Read ${
      params.name.charAt(0).toUpperCase() + params.name.slice(1)
    } Online Free`,
    description: "Generated by create next app",
  };
}

async function getMangaByGenre(name: string) {
  // try {
  //   const res = await axiosInstance(`manga/genre/${name}?page=1`);
  //   return res.data;
  // } catch (error) {
  //   return error;
  // }
  const res = await fetch(
    `http://localhost:8080/api/manga/genre/${name}?page=1`
  );
  // The return value is *not* serialized
  // You can return Date, Map, Set, etc.

  // Recommendation: handle errors
  if (!res.ok) {
    // This will activate the closest `error.js` Error Boundary
    return undefined;
  }

  return res.json();
}

export default async function Page({ params }: { params: { name: string } }) {
  const name = params.name;
  const data = await getMangaByGenre(name);
  const newname = name.charAt(0).toUpperCase() + name.slice(1);
  if (!data) {
    return <Error />;
  }

  return (
    <>
      <MangaScreen mangas={data} newName={newname} type="Genre" searchPage={false} />
    </>
  );
}
