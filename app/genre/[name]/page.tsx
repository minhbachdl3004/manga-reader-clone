import type { Metadata } from "next";
import Category from "@/components/common/category";
import { Header } from "@/components/common/heading/Header";
import BreadCrumb from "@/components/common/BreadCrumb";
import Error from "./error";
import { MangaPoster2 } from "@/components/common/MangaPoster";
import Detail from "@/components/common/Detail";
import Tick from "@/components/manga-card/Tick";
import { homepageUrl } from "utils/urlConfig";
import { MangaProps } from "utils/type";



export async function generateMetadata({
  params,
}: {
  params: { name: string };
}): Promise<Metadata> {
  const data = await getMangaByGenre(params.name);

  // if (!data?.mangas) return notFound();

  return {
    title: `Read ${
      params.name.charAt(0).toUpperCase() + params.name.slice(1)
    } Online Free`,
    description: "Generated by create next app",
  };
}

async function getMangaByGenre(name: string) {
  // try {
  //   const res = await axiosInstance(`manga/genre/${name}?page=1`);
  //   return res.data;
  // } catch (error) {
  //   return error;
  // }
  const res = await fetch(
    `http://localhost:8080/api/manga/genre/${name}?page=1`
  );
  // The return value is *not* serialized
  // You can return Date, Map, Set, etc.

  // Recommendation: handle errors
  if (!res.ok) {
    // This will activate the closest `error.js` Error Boundary
    return undefined;
  }

  return res.json();
}

export default async function Page({ params }: { params: { name: string } }) {
  const name = params.name;
  const data = await getMangaByGenre(name);
  const newname = name.charAt(0).toUpperCase() + name.slice(1);
  if (!data) {
    return <Error />;
  }

  return (
    <>
      <ul>
        <BreadCrumb name={newname} type="Genre" />
        <div className="manga-list gap-[10px] overflow-hidden max-xl:flex max-xl:flex-col max-xl:gap-0">
          <div className="w-full float-left mb-[40px] max-xl:mb-0 overflow-hidden">
            <section className="block mb-[40px] relative">
              <Header title={`${newname} Manga`} />
              <div className="my-0 mx-[-7px] list-items max-md:flex max-md:flex-col">
                {data.mangas.map((manga: MangaProps) => (
                  <div
                    className="p-[1em] mb-[12px] rounded-[0.75em] bg-[#2f2f2f] float-left mx-[7px] relative"
                    style={{ width: "calc(100% - 10px)" }}
                    key={manga._id}
                  >
                    <MangaPoster2
                      poster={manga.poster}
                      styles="top-[1em] left-[1em] w-[140px] absolute h-auto pb-[200px]"
                    >
                      <Tick isDisplay={true} />
                    </MangaPoster2>
                    <Detail
                      name={manga.name}
                      genres={manga.genres}
                      latestChapters={manga.chapters.slice(0, 3)}
                      link={
                        `${homepageUrl}/` +
                        manga.name.toLowerCase().replaceAll(" ", "-") +
                        `-${manga.mangaId}`
                      }
                    />
                  </div>
                ))}
              </div>
            </section>
          </div>
          <div className="">
            <Header title="Genres" styles="ml-[20px]" />
            <Category />
          </div>
        </div>
      </ul>
    </>
  );
}
