import React from "react";
import { notFound } from "next/navigation";
import { Metadata } from "next";
import { apiUrl } from "utils/urlConfig";
import { MangaProps } from "utils/type";
import Image from "next/image";

async function getMangaByMangaIdAndChapterId(
  mangaId: string,
  chapterId: string
) {
  const res = await fetch(
    `${apiUrl}/manga/search?mangaId=${mangaId}&chapterId=${chapterId}`
  );
  // The return value is *not* serialized
  // You can return Date, Map, Set, etc.

  // Recommendation: handle errors
  if (!res.ok) {
    // This will activate the closest `error.js` Error Boundary
    return undefined;
  }

  return res.json();
}

// export async function generateMetadata({
//   params,
// }: {
//   params: { name: string };
// }): Promise<Metadata> {
//   let nameArr = params.name.split("-");
//   let mangaId = nameArr[nameArr.length - 1];
//   const data = await getMangaById(mangaId);

//   if (!data) return notFound();

//   return {
//     title: `${data.manga.name} Manga Online`,
//     description: "Generated by create next app",
//   };
// }

export default async function Page({
  params,
}: {
  params: { name: string; id: string };
}) {
  const nameArr = params.name.split("-");
  const mangaId = nameArr[nameArr.length - 1];
  const chapterId = params.id;
  const { manga } = await getMangaByMangaIdAndChapterId(mangaId, chapterId);
  return (
    <div className="max-w-[1400px] w-full overflow-hidden bg-[#1f1f1f]">
      <div className="max-w-[1400px] px-[20px] flex justify-center items-center">
        <div
          className="pt-[100px] flex flex-col"
          style={{ transformOrigin: "top" }}
        >
          {manga.chapters[0].images.map((image: any, i: number) => (
            <div
              key={image}
              className="block w-full mt-0 mx-auto mb-[20px] min-h-[200px] relative"
            >
              <Image
                alt=""
                src={image}
                width={1000}
                height={200}
                className="inline-block max-w-full h-auto relative z-[2] object-cover"
              ></Image>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
